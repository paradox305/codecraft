!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/rivals/Documents/developer/codecraft/codecraft-backend/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
Chunker	core/utils/chunkers.py	/^class Chunker:$/;"	c
DocumentAssistant	core/agents/document_assistant.py	/^class DocumentAssistant:$/;"	c
Embeddings	core/utils/embeddings.py	/^class Embeddings:$/;"	c
ErrorHandling	core/utils/error_handling.py	/^class ErrorHandling:$/;"	c
HealthCareService	api/services/healthcare_service.py	/^class HealthCareService:$/;"	c
MaskPdf	core/agents/mask_pdf.py	/^class MaskPdf:$/;"	c
MaskPdfService	api/services/mask_pdf.py	/^class MaskPdfService:$/;"	c
OLLAMA_GPU_SERVER	api/constants.py	/^OLLAMA_GPU_SERVER = os.getenv("OLLAMA_GPU_SERVER")$/;"	v
OllamaClient	core/models/ollama.py	/^class OllamaClient:$/;"	c
PdfExtractor	core/utils/extractors/pdf_extractor.py	/^class PdfExtractor:$/;"	c
Weaviate	core/utils/vectorstores/weaviate.py	/^from langchain_weaviate.vectorstores import WeaviateVectorStore as Weaviate$/;"	Y	nameref:unknown:WeaviateVectorStore
WeaviateVectorStore	core/utils/vectorstores/weaviate.py	/^class WeaviateVectorStore:$/;"	c
__all__	api/services/__init__.py	/^__all__ = ["MaskPdfService"]/;"	v
__init__	api/services/healthcare_service.py	/^    def __init__(self):$/;"	m	class:HealthCareService
__init__	api/services/mask_pdf.py	/^    def __init__(self):$/;"	m	class:MaskPdfService
__init__	core/agents/document_assistant.py	/^    def __init__(self):$/;"	m	class:DocumentAssistant
__init__	core/agents/mask_pdf.py	/^    def __init__(self):$/;"	m	class:MaskPdf
__init__	core/models/ollama.py	/^    def __init__(self, model_name, gpu_server, **kwargs):$/;"	m	class:OllamaClient
__init__	core/utils/chunkers.py	/^    def __init__(self):$/;"	m	class:Chunker
__init__	core/utils/embeddings.py	/^    def __init__(self):$/;"	m	class:Embeddings
__init__	core/utils/error_handling.py	/^    def __init__(self):$/;"	m	class:ErrorHandling
__init__	core/utils/extractors/pdf_extractor.py	/^    def __init__(self):$/;"	m	class:PdfExtractor
__init__	core/utils/vectorstores/weaviate.py	/^    def __init__(self):$/;"	m	class:WeaviateVectorStore
add_documents_to_vector_store	core/utils/vectorstores/weaviate.py	/^    def add_documents_to_vector_store(self, index_name, documents, **kwargs):$/;"	m	class:WeaviateVectorStore
add_error	core/utils/error_handling.py	/^    def add_error(self, error_type: str, message: str) -> None:$/;"	m	class:ErrorHandling	typeref:typename:None
add_request_id	api/main.py	/^async def add_request_id(request: Request, call_next):$/;"	f
catch_exceptions_middleware	api/main.py	/^async def catch_exceptions_middleware(request: Request, call_next):$/;"	f
chunk_text	core/utils/chunkers.py	/^    def chunk_text(self, documents, chunk_size=1000):$/;"	m	class:Chunker
clear_errors	core/utils/error_handling.py	/^    def clear_errors(self) -> None:$/;"	m	class:ErrorHandling	typeref:typename:None
codecraft	README.md	/^# codecraft$/;"	c
critical	core/utils/logger.py	/^def critical(msg: str, *args, **kwargs):$/;"	f
debug	core/utils/logger.py	/^def debug(msg: str, *args, **kwargs):$/;"	f
error	core/utils/logger.py	/^def error(msg: str, *args, **kwargs):$/;"	f
extract_text_with_ocr	core/utils/extractors/pdf_extractor.py	/^    def extract_text_with_ocr(self, file_buffer):$/;"	m	class:PdfExtractor
get_client	core/models/ollama.py	/^    def get_client(self):$/;"	m	class:OllamaClient
get_env_variable	core/utils/env.py	/^def get_env_variable(variable_name):$/;"	f
get_error	core/utils/error_handling.py	/^    def get_error(self, error_type: str) -> tuple:$/;"	m	class:ErrorHandling	typeref:typename:tuple
global_exception_handler	api/main.py	/^async def global_exception_handler(request: Request, exc: Exception):$/;"	f
has_errors	core/utils/error_handling.py	/^    def has_errors(self) -> bool:$/;"	m	class:ErrorHandling	typeref:typename:bool
healthcare_router	api/main.py	/^from api.routers.healthcare import router as healthcare_router$/;"	Y	nameref:unknown:router
healthcare_service	api/routers/healthcare.py	/^healthcare_service = HealthCareService()$/;"	v
http_exception_handler	api/main.py	/^async def http_exception_handler(request: Request, exc: HTTPException):$/;"	f
info	core/utils/logger.py	/^def info(msg: str, *args, **kwargs):$/;"	f
knowledge_creation_agent	core/agents/document_assistant.py	/^    def knowledge_creation_agent(self, pdf_file, index_name):$/;"	m	class:DocumentAssistant
load_pdf_from_buffer	core/utils/extractors/pdf_extractor.py	/^    def load_pdf_from_buffer(self, pdf_bytes: bytes):$/;"	m	class:PdfExtractor
logger	core/utils/logger.py	/^logger = setup_logger()$/;"	v
mask_pdf	api/routers/mask_pdf.py	/^async def mask_pdf(files: list[UploadFile], prompt: str = Form(...)):$/;"	f
mask_pdf_agent	api/services/mask_pdf.py	/^    def mask_pdf_agent(self, input_pdf, prompt):$/;"	m	class:MaskPdfService
mask_pdf_router	api/main.py	/^from api.routers.mask_pdf import router as mask_pdf_router$/;"	Y	nameref:unknown:router
mask_text_on_pdf	core/agents/mask_pdf.py	/^    def mask_text_on_pdf(self, input_pdf, prompt, dpi=600):$/;"	m	class:MaskPdf
mask_words	core/agents/mask_pdf.py	/^    def mask_words(self, words, prompt):$/;"	m	class:MaskPdf
np	core/agents/mask_pdf.py	/^        import numpy as np$/;"	I	member:MaskPdf.__init__	file:	nameref:module:numpy
origins	api/main.py	/^origins = [$/;"	v
required_env_variables	core/utils/env.py	/^required_env_variables = ['WEAVIATE_HOST']$/;"	v
required_varaiables	api/constants.py	/^required_varaiables = [$/;"	v
root	api/main.py	/^async def root():$/;"	f
router	api/routers/healthcare.py	/^router = APIRouter($/;"	v
router	api/routers/mask_pdf.py	/^router = APIRouter($/;"	v
search	api/routers/healthcare.py	/^async def search(query: str):$/;"	f
search	core/utils/vectorstores/weaviate.py	/^    def search(self, query, index_name):$/;"	m	class:WeaviateVectorStore
search_agent	api/services/healthcare_service.py	/^    async def search_agent(self, query):$/;"	m	class:HealthCareService
search_agent	core/agents/document_assistant.py	/^    def search_agent(self, query, index_name, system_prompt):$/;"	m	class:DocumentAssistant
server	api/main.py	/^server = FastAPI($/;"	v
setup_logger	core/utils/logger.py	/^def setup_logger(name: str = "core", level: Optional[int] = None) -> logging.Logger:$/;"	f	typeref:typename:logging.Logger
upload_report	api/routers/healthcare.py	/^async def upload_report(file: UploadFile):$/;"	f
upload_report	api/services/healthcare_service.py	/^    async def upload_report(self, pdf_file):$/;"	m	class:HealthCareService
warning	core/utils/logger.py	/^def warning(msg: str, *args, **kwargs):$/;"	f
